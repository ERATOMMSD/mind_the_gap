import smtutil
from typing import *
from graphviz import Digraph
import subprocess
import time
from fractions import Fraction
import math
import itertools
import copy
import cProfile

import treeutil
import util

def erase_obvious_connectives(t: Any) -> Any:
    if type(t) is list:
        if type(t[0]) is str:
            tag = util.get_tag(t[0])
            if tag == "and":
                contents = [erase_obvious_connectives(tt) for tt in t[1:]]
                contents = [x for x in contents if x != "true"]
                unfoldeds: List[Any] = []
                for i in contents:
                    if type(i) is list and i[0] == "and":
                        unfoldeds += i[1:]
                    else:
                        unfoldeds.append(i)
                if "false" in unfoldeds:
                    return "false"
                if len(unfoldeds) == 0:
                    return "true"
                elif len(unfoldeds) == 1:
                    return unfoldeds[0]
                assert util.get_tag(unfoldeds[0][0]) != "and"
                return ["and"] + unfoldeds
            elif tag == "or":
                contents = [erase_obvious_connectives(tt) for tt in t[1:]]
                contents = [x for x in contents if x != "false"]
                unfoldeds = []
                for i in contents:
                    if type(i) is list and i[0] == "or":
                        unfoldeds += i[1:]
                    else:
                        unfoldeds.append(i)
                if "true" in unfoldeds:
                    return "true"
                if len(unfoldeds) == 0:
                    return "false"
                elif len(unfoldeds) == 1:
                    return unfoldeds[0]
                return ["or"] + unfoldeds
            else:
                return [tag] + [erase_obvious_connectives(tt) for tt in t[1:]]
        else:
            return [erase_obvious_connectives(tt) for tt in t]
    else:
        return t
        if type(t) is str:
            return util.get_tag(t)
        else:
            assert False


def print_tree(t: Any) -> None:
    G = Digraph(format="png")
    nodes = 0
    edges = 0 
    f = open("logic.txt", "w")
    def help(t: Any) -> int:
        nonlocal G
        nonlocal nodes
        nonlocal edges
        if type(t) is list:
            if type(t[0]) is str:
                tag = util.get_tag(t[0])
                if tag == "and" or tag == "or" or tag == "not":
                    me = nodes
                    G.node(str(me), tag)
                    nodes += 1
                    for i in t[1:]:
                        child = help(i)
                        G.edge(str(me), str(child), str(edges))
                        edges += 1
                    return me
        me = nodes
        G.node(str(me), f"F{me}")
        # print(f"F{me}")
        f.write(f"F{me}: {util.debug_print_list(t)}\n")
        nodes += 1
        return me

    
    help(t)
    f.close()
    print(nodes)
    G.render("logic")


def erase_redundant_mod(t: Any) -> Any:
    """applied for lia formula"""
    def help(t: Any, m_: int) -> Any:
        if type(t) is list:
            if type(t[0]) is str:
                tag = util.get_tag(t[0])
                if tag == "mod":
                    assert len(t) == 3
                    if type(t[2]) is str:
                        return help(["mod", t[1], int(util.get_tag(t[2]))], m_)
                    elif type(t[2]) is int:
                        if t[2] == m_:
                            return help(t[1], m_)
                        else:
                            return ["mod", help(t[1], t[2]), t[2]]
            return [help(x, m_) for x in t]
        return t
    return help(t, 0)

def erase_redundant_andterm_semantically(t: Any) -> Any:
    vars = set(treeutil.get_variables(t))
    def help2(children: List[Any]) -> List[Any]:
        if len(children) == 0:
            assert False
        elif len(children) == 1:
            return children
        else:
            n = len(children)
            checks = [["=>", ["and"] + [children[(1 + i + j)%n] for i in range(n - 1)], children[j]] for j in range(n)]
            for i, check in enumerate(checks):
                res_valid = smtutil.check_valid_lia(check)
                if res_valid:
                    # i's is redundant
                    return help2([c for j, c in enumerate(children) if j != i])
            return children
        assert False
        return []
    def help(t: Any) -> Any:
        nonlocal vars
        if type(t) is list:
            if type(t[0]) is str:
                tag = util.get_tag(t[0])
                if tag == "and":
                    if len(t) == 0:
                        return "true"
                    elif len(t) == 1:
                        return help(t[0])
                    else:
                        children = [help(x) for x in t[1:]]
                        reduced = help2(children)
                        if len(reduced) == 0:
                            return "true"
                        elif len(reduced) == 1:
                            return reduced[0]
                        else:
                            return ["and"] + reduced
        return t
    return help(t)


def erase_redundant_orterm_semantically(t: Any) -> Any:
    vars = set(treeutil.get_variables(t))
    def help2(children: List[Any]) -> List[Any]:
        if len(children) == 0:
            assert False
        elif len(children) == 1:
            return children
        else:
            n = len(children)
            checks = [["=>", children[j], ["or"] + [children[(1 + i + j)%n] for i in range(n - 1)]] for j in range(n)]
            for i, check in enumerate(checks):
                res_valid = smtutil.check_valid_lia(check)
                if res_valid:
                    # i's is redundant
                    return help2([c for j, c in enumerate(children) if j != i])
            return children
        assert False
        return []
    def help(t: Any) -> Any:
        nonlocal vars
        if type(t) is list:
            if type(t[0]) is str:
                tag = util.get_tag(t[0])
                if tag == "or":
                    if len(t) == 0:
                        return "false"
                    elif len(t) == 1:
                        return help(t[0])
                    else:
                        children = [help(x) for x in t[1:]]
                        reduced = help2(children)
                        if len(reduced) == 0:
                            return "false"
                        elif len(reduced) == 1:
                            return reduced[0]
                        else:
                            return ["or"] + reduced
        return t
    return help(t)


def erase_redundant_connectives_cnf(t: Any, m: int, logic: str) -> Any:
    vars = set(treeutil.get_variables(t))
    def help2_and(children: List[Any]) -> List[Any]:
        if len(children) == 0:
            assert False
        elif len(children) == 1:
            return children
        else:
            n = len(children)
            checks = [["=>", ["and"] + [children[(1 + i + j)%n] for i in range(n - 1)], children[j]] for j in range(n)]
            # checks = [erase_redundant_mod(check) for check in checks]
            # checks = [reduce_mod_violently(check, m, m) for check in checks]
            for i, check in enumerate(checks):
                # print("calling")
                if logic == "lia":  
                    # checks = [reduce_mod_violently(check, m, m) for check in checks]
                    res_valid = smtutil.check_valid_lia(check)
                elif logic == "liabv":
                    res_valid = smtutil.check_valid_bv(check, m)
                else:
                    assert False
                if res_valid:
                    # i's is redundant
                    # print(f"reduced! {len(children)}")
                    return help2_and([c for j, c in enumerate(children) if j != i])
            return children
        assert False
        return []
    def help2_or(children: List[Any]) -> List[Any]:
        if len(children) == 0:
            assert False
        elif len(children) == 1:
            return children
        else:
            n = len(children)
            checks = [["=>", children[j], ["or"] + [children[(1 + i + j)%n] for i in range(n - 1)]] for j in range(n)]
            # checks = [erase_redundant_mod(check) for check in checks]
            # checks = [reduce_mod_violently(check, m, m) for check in checks]
            for i, check in enumerate(checks):
                # print("calling")
                if logic == "lia":  
                    # checks = [reduce_mod_violently(check, m, m) for check in checks]
                    res_valid = smtutil.check_valid_lia(check)
                elif logic == "liabv":
                    res_valid = smtutil.check_valid_bv(check, m)
                else:
                    assert False
                if res_valid:
                    # i's is redundant
                    # print(f"reduced! {len(children)}")
                    return help2_or([c for j, c in enumerate(children) if j != i])
            return children
        assert False
        return []
    def help(t: Any, depth: int) -> Any:
        nonlocal vars
        # print(f"IN DEPTH {depth}")
        if type(t) is list:
            if type(t[0]) is str:
                tag = util.get_tag(t[0])
                if tag == "and":
                    if len(t) == 0:
                        # print(f"OUT DEPTH {depth}")
                        return "true"
                    elif len(t) == 1:
                        # print(f"OUT DEPTH {depth}")
                        return help(t[0], depth+1)
                    else:
                        children = [help(x, depth+1) for x in t[1:]]  # and or or's
                        t2 = erase_obvious_connectives(["and"] + children) #cnf
                        if type(t2) is list and util.get_tag(t2[0]) == "and":
                            children = t2[1:]
                            reduced = help2_and(children)
                            if len(reduced) == 0:
                                # print(f"OUT DEPTH {depth}")
                                return "true"
                            elif len(reduced) == 1:
                                # print(f"OUT DEPTH {depth}")
                                return reduced[0]
                            else:
                                # print(f"OUT DEPTH {depth}")
                                return ["and"] + reduced
                        else:
                            # print(f"OUT DEPTH {depth}")
                            return t2
                elif tag == "or": # return and's
                    if len(t) == 0:
                        # print(f"OUT DEPTH {depth}")
                        return "false"
                    elif len(t) == 1:
                        # print(f"OUT DEPTH {depth}")
                        return help(t[0], depth+1)
                    else:
                        children = [help(x, depth+1) for x in t[1:]] # and or or's.  flip ors.
                        ands: List[Any] = []
                        non_ands: List[Any] = []
                        for child in children:
                            if type(child) is list and util.get_tag(child[0]) == "and":
                                ands.append(child)
                            else:
                                non_ands.append(child)
                        and_contents = [ands_i[1:] for ands_i in ands]
                        choices = and_contents + [[x] for x in non_ands]
                        new_and_contents: List[Any] = []
                        for chosens in itertools.product(*choices):
                            reduced_chosens = help2_or(list(chosens))
                            if len(reduced_chosens) == 0:
                                new_and_contents.append("false")
                            elif len(reduced_chosens) == 1:
                                new_and_contents.append(reduced_chosens[0])
                            else:
                                new_and_contents.append(["or"] + reduced_chosens)
                        reduced = help2_and(new_and_contents)
                        if len(reduced) == 0:
                            # print(f"OUT DEPTH {depth}")
                            return "true"
                        elif len(reduced) == 1:
                            # print(f"OUT DEPTH {depth}")
                            return reduced[0]
                        else:
                            # print(f"OUT DEPTH {depth}")
                            return ["and"] + reduced
        # print(f"OUT DEPTH {depth}")
        return t
    return help(t, 0)


def erase_redundant_connectives_semantically(t: Any, m: int, logic: str) -> Any:
    vars = set(treeutil.get_variables(t))
    def help2_and(children: List[Any]) -> List[Any]:
        if len(children) == 0:
            assert False
        elif len(children) == 1:
            return children
        else:
            n = len(children)
            checks = [["=>", ["and"] + [children[(1 + i + j)%n] for i in range(n - 1)], children[j]] for j in range(n)]
            checks = [erase_redundant_mod(check) for check in checks]
            checks1 = [reduce_mod_violently(check, m, m) for check in checks]
            for i, check in enumerate(checks1):
                print("calling")
                if logic == "lia":  
                    res_valid = smtutil.check_valid_lia(check)
                elif logic == "liabv":
                    res_valid = smtutil.check_valid_bv(check, m)
                else:
                    assert False
                if res_valid:
                    # i's is redundant
                    print("reduced!")
                    return help2_and([c for j, c in enumerate(children) if j != i])
            return children
        assert False
        return []
    def help2_or(children: List[Any]) -> List[Any]:
        if len(children) == 0:
            assert False
        elif len(children) == 1:
            return children
        else:
            n = len(children)
            checks = [["=>", children[j], ["or"] + [children[(1 + i + j)%n] for i in range(n - 1)]] for j in range(n)]
            checks = [erase_redundant_mod(check) for check in checks]
            checks1 = [reduce_mod_violently(check, m, m) for check in checks]
            for i, check in enumerate(checks1):
                print("calling")
                if logic == "lia":  
                    res_valid = smtutil.check_valid_lia(check)
                elif logic == "liabv":
                    res_valid = smtutil.check_valid_bv(check, m)
                else:
                    assert False
                if res_valid:
                    # i's is redundant
                    print("reduced!")
                    return help2_or([c for j, c in enumerate(children) if j != i])
            return children
        assert False
        return []
    def help(t: Any) -> Any:
        nonlocal vars
        if type(t) is list:
            if type(t[0]) is str:
                tag = util.get_tag(t[0])
                if tag == "and":
                    if len(t) == 0:
                        return "true"
                    elif len(t) == 1:
                        return help(t[0])
                    else:
                        children = [help(x) for x in t[1:]] 
                        reduced = help2_and(children)
                        if len(reduced) == 0:
                            return "true"
                        elif len(reduced) == 1:
                            return reduced[0]
                        else:
                            return ["and"] + reduced
                elif tag == "or":
                    if len(t) == 0:
                        return "false"
                    elif len(t) == 1:
                        return help(t[0])
                    else:
                        children = [help(x) for x in t[1:]]
                        reduced = help2_or(children)
                        if len(reduced) == 0:
                            return "false"
                        elif len(reduced) == 1:
                            return reduced[0]
                        else:
                            return ["or"] + reduced
        return t
    return help(t)


def reduce_mod_violently(t: Any, m: int, threshold_mod: int) -> Optional[Any]:
    t1 = copy.deepcopy(t)
    vars1 = treeutil.get_variables(t)
    vars = {v: (0, m - 1) for v in vars1}
    def get_mod(tree: Any, parent: Any=None, id: int=-1) -> List[Tuple[Any, Any, int]]:
        if type(tree) is list:
            if type(tree[0]) is str and util.get_tag(tree[0]) == "mod":
                return [(tree, parent, id)]
            else:
                res: List[Tuple[Any, Any, int]] = []
                for i in range(len(tree)):
                    res += get_mod(tree[i], tree, i)
                return res
        return []
    def get_bounds(coefs: Dict[str, Fraction], const: Fraction) -> Tuple[int, int]:
        val_min = 0
        val_max = 0
        assert set(vars.keys()) >= set(coefs.keys())
        for k in coefs.keys():
            if coefs[k] >= 0:
                val_min += coefs[k]*vars[k][0]
                val_max += coefs[k]*vars[k][1]
            else:
                val_min += coefs[k]*vars[k][1]
                val_max += coefs[k]*vars[k][0]
        val_min += const
        val_max += const
        return val_min, val_max
    mods = get_mod(t)
    values_to_ints: List[List[int]] = []
    valueid2expression: Dict[int, Any] = {}
    valueid2divisor: Dict[int, int] = {}
    valueid2mods: Dict[int, List[Any]] = {}
    def get_hash(mo: Any):
        return (util.debug_print_list(mo[0][1]), mo[0][2])
    hash2valueid: Dict[Tuple[str, int], int] = {}
    lets = util.get_lets(t)
    
    for i, mod1 in enumerate(mods):
        assert util.get_tag(mod1[0][0]) == "mod"
        content_mod = mod1[0][1]
        divisor_mod = mod1[0][2]
        if divisor_mod < threshold_mod:
            continue
        hash_mod1 = get_hash(mod1)
        if hash_mod1 in hash2valueid.keys():
            valueid2mods[hash2valueid[hash_mod1]].append(mod1)
            continue
        coefs, const = util.get_coefs_fraction(content_mod, lets)
        coefs = {k: v/divisor_mod for k, v in coefs.items()}
        const = const/divisor_mod
        assert set(coefs.keys()) <= set(vars.keys())
        content_min_q, content_max_q = get_bounds(coefs, const)
        content_min = int(math.ceil(content_min_q))
        content_max = int(math.floor(content_max_q))
        values_to_int = list(range(content_min, content_max + 1))
        values_to_ints.append(values_to_int)
        valueid = len(values_to_ints) - 1
        valueid2expression[valueid] = content_mod
        valueid2divisor[valueid] = divisor_mod
        valueid2mods[valueid] = [mod1]
        hash2valueid[hash_mod1] = valueid
    print(f"{len(values_to_ints)} breaking")

    segments: List[Any] = []
    assert len(values_to_ints) == len(valueid2expression)
    for replacements in itertools.product(*values_to_ints):
        cond: List[Any] = []
        for valueid, replacement in enumerate(replacements):
            divisor = valueid2divisor[valueid]
            expression = valueid2expression[valueid]
            left = util.convert_int2list(replacement * divisor)
            right = util.convert_int2list((replacement + 1) * divisor - 1)
            cond.append(["<=", left, expression])
            cond.append(["<=", expression, right])
            for mod1 in valueid2mods[valueid]:
                mod_parent = mod1[1]
                mod_id = mod1[2]
                mod_parent[mod_id] = ["-", expression, util.convert_int2list(divisor * replacement)]
        seg = ["and"] + cond + [t]
        segments.append(copy.deepcopy(seg))
    return ["or"] + segments

def simplify_tree(t: Any, m: int, logic: str) -> Any:
    t = erase_obvious_connectives(t)
    if logic == "lia":
        t = reduce_mod_violently(t, m, m)
    t = erase_redundant_connectives_semantically(t, m, logic)
    # t = erase_redundant_connectives_cnf(t, m, logic)
    return t



if __name__ == "__main__":
    s = "(and (and (or (and (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967294) (<= var_0_y 1)))) (or (and (or (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 2) (or (and (<= var_0_x 2147483647)) (and (<= var_0_x 4294967295) (<= var_0_y 4294967295)) (and (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 4294967295)) (and (<= var_0_x 4294967295) (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647))))) (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483643) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 0)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483644) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 0)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (or (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 1) (or (and (<= var_0_x 2147483647)) (and (<= var_0_x 4294967295) (<= var_0_y 4294967295)) (and (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 4294967295)) (and (<= var_0_x 4294967295) (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647))))) (and (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483644) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) 0) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647)))))) (and (or (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 2) (or (and (<= var_0_x 2147483647)) (and (<= var_0_x 4294967295) (<= var_0_y 4294967295)) (and (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 4294967295)) (and (<= var_0_x 4294967295) (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647))))) (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483643) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 0)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483644) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) 0) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (or (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 1) true) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= var_0_x 4294967295)) (and (<= var_0_y 4294967295)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647)) (and (<= var_0_x 4294967295) (<= var_0_y 4294967295)) (and (<= var_0_y 2147483647))))) (and (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483644) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) 0) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (or (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 2) (or (and (<= var_0_x 2147483647)) (and (<= var_0_x 4294967295) (<= var_0_y 4294967295)) (and (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 4294967295)) (and (<= var_0_x 4294967295) (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647))))))) (and (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647)))) (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483643) true) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 0)) 4294967296) 2147483647) true) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295))))) (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483644) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 0)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (or (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 1) (or (and (<= var_0_x 2147483647)) (and (<= var_0_x 4294967295) (<= var_0_y 4294967295)) (and (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 4294967295)) (and (<= var_0_x 4294967295) (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647))))) (and (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483644) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 0)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647)))))) (and (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647)))) (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483643) true) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 0)) 4294967296) 2147483647) true) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295))))) (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483644) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) 0) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (or (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 1) true) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= var_0_x 4294967295)) (and (<= var_0_y 4294967295)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647)) (and (<= var_0_x 4294967295) (<= var_0_y 4294967295)) (and (<= var_0_y 2147483647))))) (and (or (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483644) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 0)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (and (<= (mod (+ (mod (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) 4294967296) (mod (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 4294967295)) (and (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 4294967295) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))))) (or (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 0)) 4294967296) 2) (or (and (<= var_0_x 2147483647)) (and (<= var_0_x 4294967295) (<= var_0_y 4294967295)) (and (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) (- 2147483648)) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 4294967295)) (and (<= var_0_x 4294967295) (<= var_0_y 2147483647)))) (and (<= (mod (+ (mod (* 1 var_0_x) 4294967296) (mod (* 1 var_0_y) 4294967296) 0) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 2147483647))))))))) true)"
    s = "(and (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))) (or (bvule (bvadd (_ bv255 8) (bvneg var_0_x)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t1)) (_ bv191 8)) (bvule (bvadd (_ bv255 8) (bvneg var_0_t2)) (_ bv127 8))))"
   # print(len(s))
    # t = sexpdata.loads(s)
    # t = erase_obvious_connectives(t)
    # t = erase_redundant_mod(t)
    # s2 = smtutil.list2sexp(t)
    # print(s2)
    # print(len(s2))
    # print_tree(t)

    # s = "(and true (<= var_0_x 2) (<= var_0_x 3) (<= var_0_x 1))"
    # t = sexpdata.loads(s)
    # t = erase_obvious_connectives(t)
    # print(smtutil.list2sexp(t))
    # t = erase_redundant_andterm_semantically(t)
    # s2 = smtutil.list2sexp(t)
    # print(s2)

    # s = "(or false (<= var_0_x 2) (<= var_0_x 3) (<= var_0_x 1))"
    # t = sexpdata.loads(s)
    # t = erase_obvious_connectives(t)
    # print(smtutil.list2sexp(t))
    # t = erase_redundant_orterm_semantically(t)
    # s2 = smtutil.list2sexp(t)
    # print(s2)

    # s = "(and true (<= var_0_x 2) (<= var_0_x 3) (<= var_0_x 1))"
    # t = sexpdata.loads(s)
    # t = erase_obvious_connectives(t)
    # print(smtutil.list2sexp(t))
    # t = erase_redundant_connectives_semantically(t)
    # s2 = smtutil.list2sexp(t)
    # print(s2)

    # s = "(or false (<= var_0_x 2) (<= var_0_x 3) (<= var_0_x 1))"
    # t = sexpdata.loads(s)
    # t = erase_obvious_connectives(t)
    # print(smtutil.list2sexp(t))
    # t = erase_redundant_connectives_semantically(t)
    # s2 = smtutil.list2sexp(t)
    # print(s2)

    # s = "(or false (<= var_0_x 2) (and true (<= var_0_y 2) (<= var_0_y 3) (<= var_0_y 1)) (<= var_0_x 1))"
    # t = sexpdata.loads(s)
    # t = erase_obvious_connectives(t)
    # print(smtutil.list2sexp(t))
    # t = erase_redundant_connectives_semantically(t)
    # s2 = smtutil.list2sexp(t)
    # print(s2)

    # s = "(not (=> (and (or (and (<= (mod (+ (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) (- 2147483648)) 4294967296) 2147483644) (or (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647))) (and (<= (mod (+ (* 1 (mod (+ 4294967295 (- var_0_x)) 4294967296)) (* 1 (mod (+ 4294967295 (- var_0_y)) 4294967296)) 0) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_x)) 4294967296) 2147483647) (<= (mod (+ 4294967295 (- var_0_y)) 4294967296) 2147483647)))) (or (and (<= (mod (+ (* 1 var_0_x) (* 1 var_0_y) (- 0)) 4294967296) 2) (or (<= var_0_x 2147483647) (and (<= var_0_x 4294967295) (<= var_0_y 4294967295)) (<= var_0_y 2147483647))) (and (<= (mod (+ (* 1 var_0_x) (* 1 var_0_y) (- 2147483648)) 4294967296) 2147483647) (or (and (<= var_0_x 2147483647) (<= var_0_y 4294967295)) (and (<= var_0_x 4294967295) (<= var_0_y 2147483647)))) (and (<= (mod (+ (* 1 var_0_x) (* 1 var_0_y) 0) 4294967296) 2147483647) (<= var_0_x 2147483647) (<= var_0_y 2147483647)))))"
    # t = sexpdata.loads(s)
    # # t = reduce_mod_violently(s, 2**32, 2**32)
    # t = erase_obvious_connectives(t)
    # # t = erase_redundant_mod(t)
    # print(smtutil.list2sexp(t))
    # t = erase_redundant_connectives_semantically(t)
    # s2 = smtutil.list2sexp(t)
    # print(s2)

    # s = "(<= (mod (+ (* 1 (+ 4294967295 (- var_0_x))) (* 1 (+ 4294967295 (- var_0_y))) (- 2147483648)) 4294967296) 2147483644)"
    # t = sexpdata.loads(s)
    # t = reduce_mod_violently(t, {"var_0_x": (0, 4294967295), "var_0_y": (0, 4294967295)}, 4294967296)
    # print(smtutil.list2sexp(t))
    # t = erase_redundant_connectives_semantically(t)

    # print(len(s))
    # print("----")
    # t = sexpdata.loads(s)
    # t = erase_obvious_connectives(t)
    # t = erase_redundant_mod(t)
    # print("hogehoge")
    # # t = reduce_mod_violently(t, 2**32, 2**32)
    # print("hoge")
    # print(smtutil.list2sexp(t))
    # t = erase_redundant_connectives_semantically(t, 2**32)
    # s2 = smtutil.list2sexp(t)
    # print(s2)
    # print(len(s2))
    # # print_tree(t)

    # print(len(s))
    # t = sexpdata.loads(s)
    # t = erase_obvious_connectives(t)
    # t = erase_redundant_mod(t)
    # t = reduce_mod_violently(t, 2**32, 2**32)
    # t = erase_redundant_connectives_cnf(t, 2**32, "lia")
    # s2 = smtutil.list2sexp(t)
    # print(s2)
    # print(len(s2))
    # print_tree(t)

    # s = "(and (and (= var_2_x (mod (+ var_1_t1 var_1_t2) 256)) true) (and (<= 0 var_1_t2) (<= var_1_t2 255) (<= 0 var_1_t1) (<= var_1_t1 255) (<= 0 var_2_x) (<= var_2_x 255)))"

    for i in range(2):
        st = time.time()
        t = sexpdata.loads(s)
        cProfile.run('t = simplify_tree(t, 256, "liabv")')
        s2 = smtutil.list2sexp(t)
        print(s2)
        print(len(s2))
        en = time.time()
        print("time:", en - st)
        print("checking...")
        print(smtutil.check_valid_bv(f"(= {s} {s2})", [("var_0_t1", ""), ("var_0_t2", ""), ("var_0_x", "")], 256))
    print_tree(t)
